package infect

import (
	"math/rand"
	"time"
)

const (
	KeyLength = 32
	Letters   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
)

// https://stackoverflow.com/questions/12321133/golang-random-number-generator-how-to-seed-properly
func init() {
	rand.Seed(time.Now().UnixNano())
}

func generateKey() []byte {
	key := make([]byte, KeyLength)

	var newLetter byte
	for i := 0; i < KeyLength-2; i++ {
		newLetter = Letters[rand.Intn(len(Letters))]
		key[i] = newLetter
	}

	key[KeyLength-1] = '='

	return key
}

func xor(input, key []byte) []byte {
	newInput := make([]byte, len(input))
	timesToRepeat := len(input) / len(key)
	extra := len(input) - (timesToRepeat * len(key))

	for i := 0; i < timesToRepeat; i++ {
		offset := i * len(key)
		tmpInput := input[offset : offset+KeyLength]

		for j := 0; j < KeyLength; j++ {
			newInput[offset+j] = tmpInput[j] ^ key[j]
		}
	}

	finished := timesToRepeat * len(key)

	for i := 0; i < extra; i++ {
		newInput[finished+i] = input[finished+i] ^ key[i]
	}

	return newInput
}
